// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package permissionStore

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addPermissionForUserByIdAndCodesStmt, err = db.PrepareContext(ctx, addPermissionForUserByIdAndCodes); err != nil {
		return nil, fmt.Errorf("error preparing query AddPermissionForUserByIdAndCodes: %w", err)
	}
	if q.createPermissionStmt, err = db.PrepareContext(ctx, createPermission); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePermission: %w", err)
	}
	if q.deletePermissionByCodeStmt, err = db.PrepareContext(ctx, deletePermissionByCode); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePermissionByCode: %w", err)
	}
	if q.deletePermissionForUserByIdAndCodesStmt, err = db.PrepareContext(ctx, deletePermissionForUserByIdAndCodes); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePermissionForUserByIdAndCodes: %w", err)
	}
	if q.getPermissionsForUserByEmailStmt, err = db.PrepareContext(ctx, getPermissionsForUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetPermissionsForUserByEmail: %w", err)
	}
	if q.updatePermissionByCodeStmt, err = db.PrepareContext(ctx, updatePermissionByCode); err != nil {
		return nil, fmt.Errorf("error preparing query UpdatePermissionByCode: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addPermissionForUserByIdAndCodesStmt != nil {
		if cerr := q.addPermissionForUserByIdAndCodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addPermissionForUserByIdAndCodesStmt: %w", cerr)
		}
	}
	if q.createPermissionStmt != nil {
		if cerr := q.createPermissionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPermissionStmt: %w", cerr)
		}
	}
	if q.deletePermissionByCodeStmt != nil {
		if cerr := q.deletePermissionByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePermissionByCodeStmt: %w", cerr)
		}
	}
	if q.deletePermissionForUserByIdAndCodesStmt != nil {
		if cerr := q.deletePermissionForUserByIdAndCodesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePermissionForUserByIdAndCodesStmt: %w", cerr)
		}
	}
	if q.getPermissionsForUserByEmailStmt != nil {
		if cerr := q.getPermissionsForUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPermissionsForUserByEmailStmt: %w", cerr)
		}
	}
	if q.updatePermissionByCodeStmt != nil {
		if cerr := q.updatePermissionByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updatePermissionByCodeStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                      DBTX
	tx                                      *sql.Tx
	addPermissionForUserByIdAndCodesStmt    *sql.Stmt
	createPermissionStmt                    *sql.Stmt
	deletePermissionByCodeStmt              *sql.Stmt
	deletePermissionForUserByIdAndCodesStmt *sql.Stmt
	getPermissionsForUserByEmailStmt        *sql.Stmt
	updatePermissionByCodeStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                      tx,
		tx:                                      tx,
		addPermissionForUserByIdAndCodesStmt:    q.addPermissionForUserByIdAndCodesStmt,
		createPermissionStmt:                    q.createPermissionStmt,
		deletePermissionByCodeStmt:              q.deletePermissionByCodeStmt,
		deletePermissionForUserByIdAndCodesStmt: q.deletePermissionForUserByIdAndCodesStmt,
		getPermissionsForUserByEmailStmt:        q.getPermissionsForUserByEmailStmt,
		updatePermissionByCodeStmt:              q.updatePermissionByCodeStmt,
	}
}
