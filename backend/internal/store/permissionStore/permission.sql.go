// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permission.sql

package permissionStore

import (
	"context"

	"github.com/lib/pq"
)

const addPermissionForUserByIdAndCodes = `-- name: AddPermissionForUserByIdAndCodes :exec
insert into users_permissions (user_id, permission_id)
select $1::integer, p.id
from permissions p
where p.code = any($2::text[])
`

type AddPermissionForUserByIdAndCodesParams struct {
	Userid int32    `db:"userid" json:"userid"`
	Codes  []string `db:"codes" json:"codes"`
}

func (q *Queries) AddPermissionForUserByIdAndCodes(ctx context.Context, arg AddPermissionForUserByIdAndCodesParams) error {
	_, err := q.exec(ctx, q.addPermissionForUserByIdAndCodesStmt, addPermissionForUserByIdAndCodes, arg.Userid, pq.Array(arg.Codes))
	return err
}

const createPermission = `-- name: CreatePermission :exec
insert into permissions (code)
values ($1)
`

func (q *Queries) CreatePermission(ctx context.Context, code string) error {
	_, err := q.exec(ctx, q.createPermissionStmt, createPermission, code)
	return err
}

const deletePermissionByCode = `-- name: DeletePermissionByCode :exec
delete from permissions
where code = $1
`

func (q *Queries) DeletePermissionByCode(ctx context.Context, code string) error {
	_, err := q.exec(ctx, q.deletePermissionByCodeStmt, deletePermissionByCode, code)
	return err
}

const deletePermissionForUserByIdAndCodes = `-- name: DeletePermissionForUserByIdAndCodes :exec
delete from users_permissions up
where up.user_id = $1::integer
and up.permission_id = any(
    select p.id from permissions p
    where p.code = $2::text[]
)
`

type DeletePermissionForUserByIdAndCodesParams struct {
	Userid int32    `db:"userid" json:"userid"`
	Codes  []string `db:"codes" json:"codes"`
}

func (q *Queries) DeletePermissionForUserByIdAndCodes(ctx context.Context, arg DeletePermissionForUserByIdAndCodesParams) error {
	_, err := q.exec(ctx, q.deletePermissionForUserByIdAndCodesStmt, deletePermissionForUserByIdAndCodes, arg.Userid, pq.Array(arg.Codes))
	return err
}

const getPermissionsForUserByEmail = `-- name: GetPermissionsForUserByEmail :many
select p.code
from permissions p
inner join users_permissions up on up.permission_id = p.id
inner join users u on up.user_id = u.id
where u.email = $1
`

func (q *Queries) GetPermissionsForUserByEmail(ctx context.Context, email string) ([]string, error) {
	rows, err := q.query(ctx, q.getPermissionsForUserByEmailStmt, getPermissionsForUserByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermissionByCode = `-- name: UpdatePermissionByCode :exec
update permissions
set code = $1
where code = $2
`

type UpdatePermissionByCodeParams struct {
	Code   string `db:"code" json:"code"`
	Code_2 string `db:"code_2" json:"code_2"`
}

func (q *Queries) UpdatePermissionByCode(ctx context.Context, arg UpdatePermissionByCodeParams) error {
	_, err := q.exec(ctx, q.updatePermissionByCodeStmt, updatePermissionByCode, arg.Code, arg.Code_2)
	return err
}
