// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package jobStore

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.deleteJobByIdStmt, err = db.PrepareContext(ctx, deleteJobById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteJobById: %w", err)
	}
	if q.getAllJobsStmt, err = db.PrepareContext(ctx, getAllJobs); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllJobs: %w", err)
	}
	if q.getJobByIdStmt, err = db.PrepareContext(ctx, getJobById); err != nil {
		return nil, fmt.Errorf("error preparing query GetJobById: %w", err)
	}
	if q.updateJobByIdStmt, err = db.PrepareContext(ctx, updateJobById); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJobById: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.deleteJobByIdStmt != nil {
		if cerr := q.deleteJobByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteJobByIdStmt: %w", cerr)
		}
	}
	if q.getAllJobsStmt != nil {
		if cerr := q.getAllJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllJobsStmt: %w", cerr)
		}
	}
	if q.getJobByIdStmt != nil {
		if cerr := q.getJobByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getJobByIdStmt: %w", cerr)
		}
	}
	if q.updateJobByIdStmt != nil {
		if cerr := q.updateJobByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobByIdStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                DBTX
	tx                *sql.Tx
	createJobStmt     *sql.Stmt
	deleteJobByIdStmt *sql.Stmt
	getAllJobsStmt    *sql.Stmt
	getJobByIdStmt    *sql.Stmt
	updateJobByIdStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		createJobStmt:     q.createJobStmt,
		deleteJobByIdStmt: q.deleteJobByIdStmt,
		getAllJobsStmt:    q.getAllJobsStmt,
		getJobByIdStmt:    q.getJobByIdStmt,
		updateJobByIdStmt: q.updateJobByIdStmt,
	}
}
