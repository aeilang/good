// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package userstore

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :exec
insert into users (name, email, role, password)
values ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Name     string `db:"name" json:"name"`
	Email    string `db:"email" json:"email"`
	Role     string `db:"role" json:"role"`
	Password string `db:"password" json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser,
		arg.Name,
		arg.Email,
		arg.Role,
		arg.Password,
	)
	return err
}

const deletUserByEmail = `-- name: DeletUserByEmail :exec
delete from users where email = $1
`

func (q *Queries) DeletUserByEmail(ctx context.Context, email string) error {
	_, err := q.exec(ctx, q.deletUserByEmailStmt, deletUserByEmail, email)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, name, email, role, password, refresh_token, created_at from users
where email = $1
limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Password,
		&i.RefreshToken,
		&i.CreatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, name, email, role, password, refresh_token, created_at from users
where id = $1
limit 1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.Password,
		&i.RefreshToken,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, name, email, role, password, refresh_token, created_at from users
order by id
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Role,
			&i.Password,
			&i.RefreshToken,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePasswordByEmail = `-- name: UpdatePasswordByEmail :exec
update users set
password = $1
where email = $2
`

type UpdatePasswordByEmailParams struct {
	Password string `db:"password" json:"password"`
	Email    string `db:"email" json:"email"`
}

func (q *Queries) UpdatePasswordByEmail(ctx context.Context, arg UpdatePasswordByEmailParams) error {
	_, err := q.exec(ctx, q.updatePasswordByEmailStmt, updatePasswordByEmail, arg.Password, arg.Email)
	return err
}

const updateRefreshTokenByEmail = `-- name: UpdateRefreshTokenByEmail :exec
update users set
refresh_token = $1
where email = $2
`

type UpdateRefreshTokenByEmailParams struct {
	RefreshToken sql.NullString `db:"refresh_token" json:"refresh_token"`
	Email        string         `db:"email" json:"email"`
}

func (q *Queries) UpdateRefreshTokenByEmail(ctx context.Context, arg UpdateRefreshTokenByEmailParams) error {
	_, err := q.exec(ctx, q.updateRefreshTokenByEmailStmt, updateRefreshTokenByEmail, arg.RefreshToken, arg.Email)
	return err
}
