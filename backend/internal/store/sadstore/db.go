// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sadstore

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createSadStmt, err = db.PrepareContext(ctx, createSad); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSad: %w", err)
	}
	if q.deleteSadByIdStmt, err = db.PrepareContext(ctx, deleteSadById); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSadById: %w", err)
	}
	if q.getSadByIdStmt, err = db.PrepareContext(ctx, getSadById); err != nil {
		return nil, fmt.Errorf("error preparing query GetSadById: %w", err)
	}
	if q.getSadByUserIdStmt, err = db.PrepareContext(ctx, getSadByUserId); err != nil {
		return nil, fmt.Errorf("error preparing query GetSadByUserId: %w", err)
	}
	if q.getSadsStmt, err = db.PrepareContext(ctx, getSads); err != nil {
		return nil, fmt.Errorf("error preparing query GetSads: %w", err)
	}
	if q.updateSadStmt, err = db.PrepareContext(ctx, updateSad); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSad: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createSadStmt != nil {
		if cerr := q.createSadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSadStmt: %w", cerr)
		}
	}
	if q.deleteSadByIdStmt != nil {
		if cerr := q.deleteSadByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSadByIdStmt: %w", cerr)
		}
	}
	if q.getSadByIdStmt != nil {
		if cerr := q.getSadByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSadByIdStmt: %w", cerr)
		}
	}
	if q.getSadByUserIdStmt != nil {
		if cerr := q.getSadByUserIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSadByUserIdStmt: %w", cerr)
		}
	}
	if q.getSadsStmt != nil {
		if cerr := q.getSadsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSadsStmt: %w", cerr)
		}
	}
	if q.updateSadStmt != nil {
		if cerr := q.updateSadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSadStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                 DBTX
	tx                 *sql.Tx
	createSadStmt      *sql.Stmt
	deleteSadByIdStmt  *sql.Stmt
	getSadByIdStmt     *sql.Stmt
	getSadByUserIdStmt *sql.Stmt
	getSadsStmt        *sql.Stmt
	updateSadStmt      *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                 tx,
		tx:                 tx,
		createSadStmt:      q.createSadStmt,
		deleteSadByIdStmt:  q.deleteSadByIdStmt,
		getSadByIdStmt:     q.getSadByIdStmt,
		getSadByUserIdStmt: q.getSadByUserIdStmt,
		getSadsStmt:        q.getSadsStmt,
		updateSadStmt:      q.updateSadStmt,
	}
}
